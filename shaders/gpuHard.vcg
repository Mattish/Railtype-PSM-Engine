float4x4 getRotXMatrix(float angle){
	float4x4 result = {{1.0f,0.0f,0.0f,0.0f},
			   	   	{0.0f,cos(angle),-(sin(angle)),0.0f},
					{0.0f,sin(angle),cos(angle),0.0f},
					{0.0f,0.0f,0.0f,1.0f}};
	return result;
}

float4x4 getRotYMatrix(float angle){
	float4x4 result = {{cos(angle),0.0f,(sin(angle)),0.0f},
			   	   	{0.0f,1.0f,0.0f,0.0f},
					{-sin(angle),0.0f,cos(angle),0.0f},
					{0.0f,0.0f,0.0f,1.0f}};
	return result;
}

float4x4 getRotZMatrix(float angle){
	float4x4 result = {{cos(angle),-(sin(angle)),0.0f,0.0f},
			   	   	{sin(angle),cos(angle),0.0f,0.0f},
					{0.0f,0.0f,1.0f,0.0f},
					{0.0f,0.0f,0.0f,1.0f}};
	return result;
}

void main( float4 in a_Position  : POSITION,
		   float4 out v_Position : POSITION,
		   uniform float4x4 WorldViewProj,
		   float3 in rot : TEXCOORD0,
		   float3 in scale : TEXCOORD1,
		   float3 in trans : TEXCOORD2
		   )
{
	float4x4 tmpMatrix, tmpMatrix2;
	float4x4 modelToWorld = {{1,0,0,0}, // modelToWorld = Matrix4.Identity;
							 {0,1,0,0}, 
							 {0,0,1,0}, 
							 {0,0,0,1}};
							 
	tmpMatrix = getRotXMatrix(rot[0]);
	modelToWorld = mul(modelToWorld,tmpMatrix);
	
	tmpMatrix = getRotYMatrix(rot[1]);
	modelToWorld = mul(modelToWorld,tmpMatrix);
	
	tmpMatrix = getRotZMatrix(rot[2]);
	modelToWorld = mul(modelToWorld,tmpMatrix);
	
	tmpMatrix[0] = float4(scale[0],0,0,0);
	tmpMatrix[1] = float4(0,scale[1],0,0);
	tmpMatrix[2] = float4(0,0,scale[2],0);
	tmpMatrix[3] = float4(0,0,0,1);
	modelToWorld = mul(modelToWorld,tmpMatrix);
	
	tmpMatrix[0] = float4(1,0,0,0);
	tmpMatrix[1] = float4(0,1,0,0);
	tmpMatrix[2] = float4(0,0,1,0);
	tmpMatrix[3] = float4(trans[0],trans[1],trans[2],1);
 	modelToWorld = mul(modelToWorld,tmpMatrix);
 	modelToWorld = transpose(modelToWorld);
 	
	float4x4 tmp = mul( WorldViewProj, modelToWorld );
	v_Position = mul( tmp, a_Position );
}